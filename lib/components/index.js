// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var Component, EventEmitter;
    EventEmitter = require('../utils/events').EventEmitter;
    require('../../jquery');
    Component = (function(_super) {

      __extends(Component, _super);

      function Component(name, el) {
        if (name == null) {
          name = this.constructor.name;
        }
        this.name = this.constructor.name;
        if (name instanceof HTMLElement || name instanceof $) {
          name = [el, el = name][0];
        }
        if (el instanceof HTMLElement || el instanceof $) {
          this.el = el;
        } else if (typeof name === 'string') {
          this.name = name;
        }
        this.tag = 'div';
        this.force = false;
        this.comps = [];
        this._needsRender = true;
      }

      Component.prototype.autorender = function(time) {
        var render,
          _this = this;
        clearTimeout(this._autorenderId);
        if (time > 0) {
          render = function() {
            _this.render();
            return _this._autorenderId = setTimeout(render, time);
          };
          render();
        }
        return this;
      };

      Component.prototype.render = function(el, force) {
        var comps;
        if (typeof el === 'boolean') {
          el = [force, force = el];
        }
        el = el instanceof HTMLElement || el instanceof $ ? el : this.el;
        if (!(el instanceof HTMLElement || el instanceof $)) {
          console.warn('No element to render to for %s, creating %s', this.name, this.tag);
          el = $(document.createElement(this.tag));
        }
        el = $(el);
        if (!(this.el instanceof HTMLElement || this.el instanceof $)) {
          this.el = el;
        }
        el.addClass('editit-comp');
        el.attr('data-comp', this.name.replace(/([a-z])([A-Z])/g, '$1$2').replace(/_/g, '-').toLowerCase());
        this.emit('rendering');
        comps = Component._renderComps(this.comps);
        if (force || this.force || this._needsRender) {
          this.emit('render');
          this._render(el, comps);
          this.emit('rendered', el);
          this._needsRender = false;
        }
        return el;
      };

      Component._renderComps = function(comps) {
        var comp, doIt, i, names, subEls, _i, _len,
          _this = this;
        subEls = [];
        doIt = function(key, s) {
          if (s instanceof Component || typeof s.render === 'function') {
            return subEls[key] = s.render();
          } else if (typeof s.length === 'number' || typeof s === 'object' || typeof s === 'string') {
            return subEls[key] = _this._renderComps(s);
          }
        };
        if (typeof comps === 'object' || typeof comps === 'string') {
          names = Object.getOwnPropertyNames(comps);
          if (typeof comps.length === 'number' || typeof comps.each === 'function' || typeof comps.forEach === 'function') {
            if (typeof comps.each === 'function' || typeof comps.forEach === 'function') {
              (typeof comps.each === 'function' ? comps.each : comps.forEach).call(comps, function(s, key) {
                return doIt(key, s);
              });
            } else {
              for (i = _i = 0, _len = comps.length; _i < _len; i = ++_i) {
                comp = comps[i];
                doIt(i, comp);
              }
            }
            names = names.filter(function(name) {
              if (name === 'length' || /^[0-9]$/.test(name) || name === 'each' || name === 'forEach') {
                return false;
              } else {
                return true;
              }
            });
          }
          names.map(function(name) {
            return [name, comps[name]];
          }).forEach(function(a) {
            return doIt(a[0], a[1]);
          });
        }
        return subEls;
      };

      Component.prototype._render = function(el, comps) {};

      return Component;

    })(EventEmitter);
    return module.exports = Component;
  });

}).call(this);
