// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var Component, EventEmitter, MutationSummary;
    EventEmitter = require('../utils/events').EventEmitter;
    require('../../jquery');
    require('../utils/extend');
    MutationSummary = require('../utils/mutation_summary');
    Component = (function(_super) {

      __extends(Component, _super);

      function Component(name, el) {
        var _this = this;
        this.name = this.constructor.name;
        this._registeredComps = [];
        this._mutationSummaryOptions = {
          callback: function(summaries) {
            debugger;
            var nodes, should, summary;
            summary = {
              added: summaries.reduce((function(a, s) {
                return a.concat(s.added);
              }), []),
              removed: summaries.reduce((function(a, s) {
                return a.concat(s.removed);
              }), []),
              reparented: summaries.reduce((function(a, s) {
                return a.concat(s.reparented);
              }), []),
              reordered: summaries.reduce((function(a, s) {
                return a.concat(s.reordered);
              }), [])
            };
            nodes = summary.added.concat(summary.reordered).concat(summary.removed).concat(summary.reparented);
            should = nodes.some(function(node) {
              return ~[].slice.call(_this.el[0].childNodes).indexOf(node) || ~[].slice.call(_this.el).indexOf(node);
            });
            console.log(summaries, _this, should, nodes.map(function(n) {
              if (n.dataset) {
                return n.dataset.comp;
              } else {
                return n.nodeName;
              }
            }));
            if (should) {
              return _this.emit('changed');
            }
          },
          observeOwnChanges: true,
          queries: [
            {
              all: true
            }
          ]
        };
        if (name instanceof HTMLElement || name instanceof $ || typeof el === 'string') {
          name = [el, el = name][0];
        }
        if (el instanceof HTMLElement || el instanceof $) {
          this.el = el;
        }
        if (typeof name === 'string') {
          this.name = name;
        }
        this.comps = [];
        this.changed = true;
        this._comps(this.comps);
        this._registerComps();
      }

      Component.prototype.update = function() {
        if (!(this.el instanceof HTMLElement || this.el instanceof $)) {
          console.warn('No element to render to for %s, creating %s', this.name, this.tag);
          this.el = $(document.createElement(this.tag));
        }
        if (!(this.el instanceof $)) {
          this.el = $(this.el);
        }
        this.el.addClass('editit-comp');
        this.el.attr('data-comp', this.name.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/_/g, '-').toLowerCase());
        if (this.el.data('-editit-comp-events') !== this.name) {
          this._mutationSummary = new MutationSummary({
            rootNode: this.el[0]
          }.extend(this._mutationSummaryOptions));
          this.el.data('-editit-comp-events', this.name);
        }
        Component._updateComps(this.comps);
        this.el.html('');
        this._update(this.el, this.comps);
        this.emit('update');
        return this.el;
      };

      Component._updateComps = function(comps) {
        var comp, doIt, i, names, subEls, _i, _len,
          _this = this;
        subEls = [];
        doIt = function(key, s) {
          if (s instanceof Component || typeof s.update === 'function') {
            return subEls[key] = s.update();
          } else if (typeof s.length === 'number' || typeof s === 'object' || typeof s === 'string') {
            return subEls[key] = _this._updateComps(s);
          }
        };
        if (typeof comps === 'object' || typeof comps === 'string') {
          names = Object.getOwnPropertyNames(comps);
          if (typeof comps.length === 'number' || typeof comps.each === 'function' || typeof comps.forEach === 'function') {
            if (typeof comps.each === 'function' || typeof comps.forEach === 'function') {
              (typeof comps.each === 'function' ? comps.each : comps.forEach).call(comps, function(s, key) {
                return doIt(key, s);
              });
            } else {
              for (i = _i = 0, _len = comps.length; _i < _len; i = ++_i) {
                comp = comps[i];
                doIt(i, comp);
              }
            }
            names = names.filter(function(name) {
              if (name === 'length' || /^[0-9]+$/.test(name) || name === 'each' || name === 'forEach') {
                return false;
              } else {
                return true;
              }
            });
          }
          names.map(function(name) {
            return [name, comps[name]];
          }).forEach(function(a) {
            return doIt(a[0], a[1]);
          });
        }
        return subEls;
      };

      Component.prototype._registerComp = function(comp) {
        var onChange,
          _this = this;
        console.log("Registering " + comp.name + " for " + this.name);
        if (!~this._registeredComps.indexOf(comp)) {
          this._registeredComps.push(comp);
          onChange = function() {
            return _this.emit('changed');
          };
          comp.on('update', onChange);
          comp.on('changed', onChange);
          setTimeout((function() {
            _this.update();
            return _this.emit('comp:sub:add', comp);
          }), 0);
        }
        return comp;
      };

      Component.prototype._registerComps = function(comps) {
        var comp;
        if (comps == null) {
          comps = this.comps;
        }
        for (comp in comps) {
          if (comp instanceof Component || typeof comp.update === 'function') {
            this._registerComp(comp);
          }
        }
        return this;
      };

      Component.prototype._update = function(el, comps) {};

      Component.prototype._comps = function(comps) {};

      Component.prototype.tag = 'div';

      return Component;

    })(EventEmitter);
    return module.exports = Component;
  });

}).call(this);
